#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Teste do Sistema Ultra-Robusto
Valida todas as corre√ß√µes implementadas para garantir robustez total
"""

import sys
import os
import time
import logging
import json
from datetime import datetime
from typing import Dict, Any

# Adiciona src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_auto_save_manager():
    """Testa o sistema de salvamento autom√°tico"""
    
    print("=" * 80)
    print("üíæ TESTE DO SISTEMA DE SALVAMENTO AUTOM√ÅTICO")
    print("=" * 80)
    
    try:
        from services.auto_save_manager import auto_save_manager, salvar_etapa, salvar_erro
        
        # Inicia sess√£o de teste
        session_id = auto_save_manager.iniciar_sessao("test_session")
        print(f"‚úÖ Sess√£o iniciada: {session_id}")
        
        # Testa salvamento de etapa
        dados_teste = {
            "segmento": "Produtos Digitais",
            "dados_gerados": ["item1", "item2", "item3"],
            "timestamp": time.time()
        }
        
        arquivo_salvo = salvar_etapa("teste_etapa", dados_teste, categoria="teste")
        print(f"‚úÖ Etapa salva: {arquivo_salvo}")
        
        # Testa salvamento de erro
        try:
            raise ValueError("Erro de teste intencional")
        except Exception as e:
            arquivo_erro = salvar_erro("teste_erro", e, contexto={"teste": True})
            print(f"‚úÖ Erro salvo: {arquivo_erro}")
        
        # Testa recupera√ß√£o
        dados_recuperados = auto_save_manager.recuperar_etapa("teste_etapa", session_id)
        if dados_recuperados and dados_recuperados['dados']['segmento'] == "Produtos Digitais":
            print("‚úÖ Recupera√ß√£o de dados funcionando")
        else:
            print("‚ùå Falha na recupera√ß√£o de dados")
            return False
        
        # Testa listagem
        etapas_listadas = auto_save_manager.listar_etapas_salvas(session_id)
        print(f"‚úÖ Etapas listadas: {len(etapas_listadas)} encontradas")
        
        # Testa consolida√ß√£o
        relatorio = auto_save_manager.consolidar_sessao(session_id)
        print(f"‚úÖ Relat√≥rio consolidado: {relatorio}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de salvamento autom√°tico: {e}")
        return False

def test_url_filter_manager():
    """Testa o sistema de filtros de URL"""
    
    print("\n" + "=" * 80)
    print("üîç TESTE DO SISTEMA DE FILTROS DE URL")
    print("=" * 80)
    
    try:
        from services.url_filter_manager import url_filter_manager, filtrar_urls
        
        # URLs de teste (algumas devem ser bloqueadas)
        test_urls = [
            {
                'url': 'https://g1.globo.com/tecnologia/noticia.html',
                'title': 'An√°lise do mercado de tecnologia no Brasil',
                'snippet': 'Mercado brasileiro de tecnologia cresce 25% em 2024'
            },
            {
                'url': 'https://accounts.google.com/signin',
                'title': 'Fazer login na sua conta Google',
                'snippet': 'Entre na sua conta Google para acessar'
            },
            {
                'url': 'https://instagram.com/profile/user',
                'title': 'Perfil do Instagram',
                'snippet': 'Veja fotos e v√≠deos no Instagram'
            },
            {
                'url': 'https://exame.com/negocios/analise-mercado-2024',
                'title': 'An√°lise completa do mercado brasileiro 2024',
                'snippet': 'Dados e estat√≠sticas do crescimento empresarial'
            },
            {
                'url': 'https://answers.microsoft.com/pt-br/help',
                'title': 'Ajuda e suporte Microsoft',
                'snippet': 'Encontre respostas para suas d√∫vidas'
            }
        ]
        
        print(f"üß™ Testando filtro com {len(test_urls)} URLs...")
        
        # Aplica filtros
        urls_aprovadas = filtrar_urls(test_urls)
        
        print(f"üìä Resultado do filtro:")
        print(f"   ‚Ä¢ URLs originais: {len(test_urls)}")
        print(f"   ‚Ä¢ URLs aprovadas: {len(urls_aprovadas)}")
        print(f"   ‚Ä¢ Taxa de aprova√ß√£o: {len(urls_aprovadas)/len(test_urls)*100:.1f}%")
        
        # Verifica se URLs corretas foram aprovadas/bloqueadas
        urls_aprovadas_set = {item['url'] for item in urls_aprovadas}
        
        # Deve aprovar
        deve_aprovar = [
            'https://g1.globo.com/tecnologia/noticia.html',
            'https://exame.com/negocios/analise-mercado-2024'
        ]
        
        # Deve bloquear
        deve_bloquear = [
            'https://accounts.google.com/signin',
            'https://instagram.com/profile/user',
            'https://answers.microsoft.com/pt-br/help'
        ]
        
        aprovadas_corretas = sum(1 for url in deve_aprovar if url in urls_aprovadas_set)
        bloqueadas_corretas = sum(1 for url in deve_bloquear if url not in urls_aprovadas_set)
        
        print(f"   ‚Ä¢ Aprova√ß√µes corretas: {aprovadas_corretas}/{len(deve_aprovar)}")
        print(f"   ‚Ä¢ Bloqueios corretos: {bloqueadas_corretas}/{len(deve_bloquear)}")
        
        # Mostra estat√≠sticas
        stats = url_filter_manager.get_stats()
        print(f"üìà Estat√≠sticas do filtro:")
        for key, value in stats.items():
            if isinstance(value, float):
                print(f"   ‚Ä¢ {key}: {value:.1f}%")
            else:
                print(f"   ‚Ä¢ {key}: {value}")
        
        # Sucesso se pelo menos 80% das decis√µes est√£o corretas
        total_decisoes = len(deve_aprovar) + len(deve_bloquear)
        decisoes_corretas = aprovadas_corretas + bloqueadas_corretas
        taxa_acerto = (decisoes_corretas / total_decisoes) * 100
        
        print(f"üéØ Taxa de acerto do filtro: {taxa_acerto:.1f}%")
        
        return taxa_acerto >= 80
        
    except Exception as e:
        print(f"‚ùå Erro no teste de filtros de URL: {e}")
        return False

def test_resilient_executor():
    """Testa o executor resiliente"""
    
    print("\n" + "=" * 80)
    print("üõ°Ô∏è TESTE DO EXECUTOR RESILIENTE")
    print("=" * 80)
    
    try:
        from services.resilient_component_executor import resilient_executor
        
        # Componentes de teste
        def componente_sucesso(data):
            time.sleep(0.1)  # Simula processamento
            return {"status": "sucesso", "dados": f"Processado: {data.get('teste', 'N/A')}"}
        
        def componente_falha(data):
            raise Exception("Falha intencional para teste")
        
        def componente_fallback(data):
            return {"status": "fallback", "dados": "Dados de fallback"}
        
        def componente_com_dependencia(data):
            if 'comp_sucesso' in data:
                return {"status": "sucesso", "depende_de": "comp_sucesso"}
            else:
                raise Exception("Depend√™ncia n√£o atendida")
        
        # Registra componentes
        resilient_executor.registrar_componente(
            'comp_sucesso', 
            componente_sucesso,
            obrigatorio=True
        )
        
        resilient_executor.registrar_componente(
            'comp_falha',
            componente_falha,
            fallback=componente_fallback,
            obrigatorio=False
        )
        
        resilient_executor.registrar_componente(
            'comp_dependencia',
            componente_com_dependencia,
            obrigatorio=False
        )
        
        # Executa pipeline
        dados_teste = {"teste": "dados_de_entrada"}
        
        print("üöÄ Executando pipeline resiliente de teste...")
        resultado = resilient_executor.executar_pipeline_resiliente(dados_teste)
        
        # Verifica resultados
        stats = resultado['estatisticas']
        print(f"üìä Estat√≠sticas do pipeline:")
        print(f"   ‚Ä¢ Componentes executados: {stats['componentes_executados']}")
        print(f"   ‚Ä¢ Componentes falharam: {stats['componentes_falharam']}")
        print(f"   ‚Ä¢ Taxa de sucesso: {stats['taxa_sucesso']:.1f}%")
        print(f"   ‚Ä¢ Pipeline completo: {stats['pipeline_completo']}")
        
        # Verifica se dados foram preservados
        dados_gerados = resultado.get('dados_gerados', {})
        print(f"   ‚Ä¢ Dados preservados: {len(dados_gerados)} componentes")
        
        # Sucesso se pelo menos 1 componente funcionou e dados foram preservados
        return stats['componentes_executados'] >= 1 and len(dados_gerados) > 0
        
    except Exception as e:
        print(f"‚ùå Erro no teste do executor resiliente: {e}")
        return False

def test_import_fixes():
    """Testa se os imports foram corrigidos"""
    
    print("\n" + "=" * 80)
    print("üì¶ TESTE DAS CORRE√á√ïES DE IMPORT")
    print("=" * 80)
    
    try:
        # Testa imports que estavam falhando
        modules_to_test = [
            'services.mental_drivers_architect',
            'services.anti_objection_system', 
            'services.visual_proofs_generator',
            'services.pre_pitch_architect',
            'services.robust_content_extractor'
        ]
        
        import_results = []
        
        for module_name in modules_to_test:
            try:
                __import__(module_name)
                print(f"‚úÖ {module_name}: Import OK")
                import_results.append(True)
                
                # Testa se time e random est√£o dispon√≠veis
                module = sys.modules[module_name]
                if hasattr(module, 'time'):
                    print(f"   ‚úÖ time dispon√≠vel")
                if hasattr(module, 'random'):
                    print(f"   ‚úÖ random dispon√≠vel")
                    
            except Exception as e:
                print(f"‚ùå {module_name}: {e}")
                import_results.append(False)
        
        success_rate = (sum(import_results) / len(import_results)) * 100
        print(f"\nüìä Taxa de sucesso dos imports: {success_rate:.1f}%")
        
        return success_rate == 100
        
    except Exception as e:
        print(f"‚ùå Erro no teste de imports: {e}")
        return False

def test_component_fallbacks():
    """Testa se os fallbacks dos componentes funcionam"""
    
    print("\n" + "=" * 80)
    print("üîÑ TESTE DOS SISTEMAS DE FALLBACK")
    print("=" * 80)
    
    try:
        from services.mental_drivers_architect import mental_drivers_architect
        from services.anti_objection_system import anti_objection_system
        from services.visual_proofs_generator import visual_proofs_generator
        
        test_data = {
            'segmento': 'Produtos Digitais',
            'produto': 'Curso Online',
            'publico': 'Empreendedores'
        }
        
        fallback_results = []
        
        # Testa fallback de drivers mentais
        print("üß† Testando fallback de drivers mentais...")
        try:
            drivers_fallback = mental_drivers_architect._generate_fallback_drivers_system(test_data)
            if drivers_fallback and drivers_fallback.get('fallback_mode'):
                print(f"   ‚úÖ Fallback drivers: {len(drivers_fallback['drivers_customizados'])} drivers")
                fallback_results.append(True)
            else:
                print("   ‚ùå Fallback drivers falhou")
                fallback_results.append(False)
        except Exception as e:
            print(f"   ‚ùå Erro no fallback drivers: {e}")
            fallback_results.append(False)
        
        # Testa fallback de anti-obje√ß√£o
        print("üõ°Ô∏è Testando fallback de anti-obje√ß√£o...")
        try:
            anti_obj_fallback = anti_objection_system._generate_fallback_anti_objection_system(test_data)
            if anti_obj_fallback and anti_obj_fallback.get('fallback_mode'):
                print(f"   ‚úÖ Fallback anti-obje√ß√£o: {len(anti_obj_fallback['objecoes_universais'])} obje√ß√µes")
                fallback_results.append(True)
            else:
                print("   ‚ùå Fallback anti-obje√ß√£o falhou")
                fallback_results.append(False)
        except Exception as e:
            print(f"   ‚ùå Erro no fallback anti-obje√ß√£o: {e}")
            fallback_results.append(False)
        
        # Testa fallback de provas visuais
        print("üé≠ Testando fallback de provas visuais...")
        try:
            provas_fallback = visual_proofs_generator._get_default_visual_proofs(test_data)
            if provas_fallback and len(provas_fallback) > 0:
                print(f"   ‚úÖ Fallback provas visuais: {len(provas_fallback)} provas")
                fallback_results.append(True)
            else:
                print("   ‚ùå Fallback provas visuais falhou")
                fallback_results.append(False)
        except Exception as e:
            print(f"   ‚ùå Erro no fallback provas visuais: {e}")
            fallback_results.append(False)
        
        success_rate = (sum(fallback_results) / len(fallback_results)) * 100
        print(f"\nüìä Taxa de sucesso dos fallbacks: {success_rate:.1f}%")
        
        return success_rate >= 80
        
    except Exception as e:
        print(f"‚ùå Erro no teste de fallbacks: {e}")
        return False

def test_end_to_end_resilience():
    """Testa resili√™ncia end-to-end do sistema"""
    
    print("\n" + "=" * 80)
    print("üîÑ TESTE DE RESILI√äNCIA END-TO-END")
    print("=" * 80)
    
    try:
        from services.auto_save_manager import auto_save_manager
        from services.resilient_component_executor import resilient_executor
        
        # Dados de teste
        test_data = {
            'segmento': 'Produtos Digitais',
            'produto': 'Curso Online de Marketing',
            'publico': 'Empreendedores digitais',
            'preco': 997.0,
            'query': 'mercado produtos digitais Brasil 2024'
        }
        
        print("üß™ Simulando pipeline resiliente...")
        
        # Inicia sess√£o
        session_id = auto_save_manager.iniciar_sessao("test_resilience")
        
        # Simula execu√ß√£o de componentes com falhas
        componentes_simulados = [
            ('pesquisa_web', True, {"resultados": 10, "fontes": 5}),
            ('avatar_detalhado', True, {"perfil": "completo", "dores": 8}),
            ('drivers_mentais', False, None),  # Falha simulada
            ('provas_visuais', True, {"provas": 3}),
            ('anti_objecao', False, None),  # Falha simulada
            ('pre_pitch', True, {"roteiro": "completo"}),
            ('predicoes_futuro', True, {"cenarios": 3})
        ]
        
        dados_salvos = []
        
        for nome, sucesso, dados in componentes_simulados:
            if sucesso:
                from services.auto_save_manager import salvar_etapa
                arquivo = salvar_etapa(nome, dados, status="sucesso")
                dados_salvos.append((nome, arquivo))
                print(f"   ‚úÖ {nome}: Dados salvos")
            else:
                from services.auto_save_manager import salvar_erro
                arquivo = salvar_erro(nome, Exception(f"Falha simulada em {nome}"))
                print(f"   ‚ùå {nome}: Falha registrada")
        
        # Verifica se dados foram preservados
        etapas_salvas = auto_save_manager.listar_etapas_salvas(session_id)
        
        print(f"\nüìä Resultados da simula√ß√£o:")
        print(f"   ‚Ä¢ Componentes simulados: {len(componentes_simulados)}")
        print(f"   ‚Ä¢ Sucessos: {sum(1 for _, sucesso, _ in componentes_simulados if sucesso)}")
        print(f"   ‚Ä¢ Falhas: {sum(1 for _, sucesso, _ in componentes_simulados if not sucesso)}")
        print(f"   ‚Ä¢ Etapas salvas: {len(etapas_salvas)}")
        print(f"   ‚Ä¢ Dados preservados: {len(dados_salvos)} arquivos")
        
        # Testa consolida√ß√£o
        relatorio = auto_save_manager.consolidar_sessao(session_id)
        print(f"   ‚Ä¢ Relat√≥rio consolidado: {relatorio}")
        
        # Sucesso se dados foram preservados mesmo com falhas
        return len(etapas_salvas) >= 5 and len(dados_salvos) >= 4
        
    except Exception as e:
        print(f"‚ùå Erro no teste de resili√™ncia: {e}")
        return False

def run_ultra_robust_test():
    """Executa teste completo do sistema ultra-robusto"""
    
    print("üöÄ INICIANDO TESTE COMPLETO DO SISTEMA ULTRA-ROBUSTO")
    print("=" * 100)
    
    tests = [
        ("Sistema de Salvamento Autom√°tico", test_auto_save_manager),
        ("Filtros de URL Inteligentes", test_url_filter_manager),
        ("Executor Resiliente", test_resilient_executor),
        ("Corre√ß√µes de Import", test_import_fixes),
        ("Sistemas de Fallback", test_component_fallbacks),
        ("Resili√™ncia End-to-End", test_end_to_end_resilience)
    ]
    
    results = []
    total_start_time = time.time()
    
    for test_name, test_func in tests:
        print(f"\nüß™ Executando: {test_name}")
        try:
            start_time = time.time()
            result = test_func()
            execution_time = time.time() - start_time
            
            results.append((test_name, result, execution_time))
            
            status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
            print(f"{status} {test_name} em {execution_time:.2f}s")
            
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico em {test_name}: {e}")
            results.append((test_name, False, 0))
    
    total_time = time.time() - total_start_time
    
    # Relat√≥rio final
    print("\n" + "=" * 100)
    print("üèÅ RELAT√ìRIO FINAL DO SISTEMA ULTRA-ROBUSTO")
    print("=" * 100)
    
    passed = sum(1 for _, result, _ in results if result)
    total = len(results)
    
    for test_name, result, exec_time in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<50} {status} ({exec_time:.2f}s)")
    
    print(f"\nTotal: {passed}/{total} testes passaram ({passed/total*100:.1f}%)")
    print(f"Tempo total de execu√ß√£o: {total_time:.2f}s")
    
    if passed == total:
        print("\nüéâ SISTEMA ULTRA-ROBUSTO VALIDADO!")
        print("‚úÖ Todas as corre√ß√µes funcionam perfeitamente!")
        
        print("\nüõ°Ô∏è RECURSOS ULTRA-ROBUSTOS IMPLEMENTADOS:")
        print("   ‚úÖ Salvamento autom√°tico e imediato de todos os resultados")
        print("   ‚úÖ Isolamento total de falhas - um componente n√£o para os outros")
        print("   ‚úÖ Sistemas de fallback para todos os componentes cr√≠ticos")
        print("   ‚úÖ Filtros inteligentes de URL para evitar conte√∫do irrelevante")
        print("   ‚úÖ Executor resiliente que nunca para completamente")
        print("   ‚úÖ Recupera√ß√£o autom√°tica de dados em caso de falha")
        print("   ‚úÖ Consolida√ß√£o autom√°tica de relat√≥rios intermedi√°rios")
        print("   ‚úÖ Corre√ß√µes de import para evitar erros de 'name not defined'")
        
        print("\nüöÄ GARANTIAS DO SISTEMA:")
        print("   üîí NENHUM DADO √â PERDIDO - Salvamento imediato ap√≥s cada etapa")
        print("   üõ°Ô∏è FALHAS ISOLADAS - Um componente falhando n√£o para o sistema")
        print("   üìä RELAT√ìRIOS PRESERVADOS - Todos os resultados intermedi√°rios salvos")
        print("   üîÑ RECUPERA√á√ÉO AUTOM√ÅTICA - Sistema se recupera de falhas automaticamente")
        print("   üéØ QUALIDADE GARANTIDA - Filtros removem conte√∫do irrelevante")
        
        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("1. ‚úÖ Execute uma an√°lise real para validar em produ√ß√£o")
        print("2. üìä Monitore diret√≥rio 'relatorios_intermediarios' para ver dados salvos")
        print("3. üîß Configure APIs restantes para m√°xima qualidade")
        print("4. üìà Sistema est√° pronto para uso em produ√ß√£o!")
        
    elif passed >= total * 0.8:
        print("\nüëç SISTEMA MAJORITARIAMENTE ROBUSTO!")
        print("‚ö†Ô∏è Algumas funcionalidades podem precisar de ajustes")
        print("üîß Revise os testes que falharam")
        
    else:
        print("\n‚ùå SISTEMA PRECISA DE MAIS CORRE√á√ïES!")
        print("üö® Muitos testes falharam - revise implementa√ß√£o")
        print("üîß Verifique logs detalhados para debug")
    
    return passed >= total * 0.8

if __name__ == "__main__":
    success = run_ultra_robust_test()
    
    if success:
        print("\nüéØ SISTEMA ULTRA-ROBUSTO IMPLEMENTADO COM SUCESSO!")
        
        print("\nüìã RESUMO DAS MELHORIAS:")
        print("‚Ä¢ üíæ Auto Save Manager: Salva todos os dados imediatamente")
        print("‚Ä¢ üõ°Ô∏è Resilient Executor: Isola falhas e continua processamento")
        print("‚Ä¢ üîç URL Filter Manager: Remove conte√∫do irrelevante")
        print("‚Ä¢ üîÑ Sistemas de Fallback: Garantem que sempre h√° resultado")
        print("‚Ä¢ üì¶ Imports Corrigidos: Eliminam erros de 'name not defined'")
        print("‚Ä¢ üéØ Pipeline Resiliente: Nunca para completamente")
        
        print("\nüöÄ O SISTEMA AGORA √â VERDADEIRAMENTE ULTRA-ROBUSTO!")
        print("   Pode falhar em componentes individuais mas NUNCA perde dados!")
        
    else:
        print("\nüîß A√á√ïES NECESS√ÅRIAS:")
        print("1. ‚ùå Revise os testes que falharam")
        print("2. üîß Verifique implementa√ß√£o dos componentes")
        print("3. üß™ Execute testes individuais para debug")
        print("4. üìû Consulte logs para detalhes espec√≠ficos")
    
    sys.exit(0 if success else 1)